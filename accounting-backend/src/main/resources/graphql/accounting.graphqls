type Query {
    # Return all known Customers with optional filter or orders
    # If size is unset, it defaults to 20
    # If page is unset, it defaults to 0
    customers(page: Int, size: Int, filter: CustomerFilter, orders: [CustomerOrder!]): CustomerSearchResult!
    # Return the Owner with the specified id
    customer(id: ID!): Customer!
    # Return the Company with the specified id
    company(id: ID!): Company

    # Return a List of all companies that have been registered to Customer
    companies: [Company]!
    # Return logged in USer
    me: User!
}

type Company {
    id: ID
    name: String
    address: String!
    city: String!
    phone: String!
}

type User {
    username: String!
    fullname: String!
    password: String
    enabled: Boolean
}

type Customer {
    id: ID
    name: String
    address: String!
    city: String!
    phone: String!
    companies: [Company]!
}


type CustomerSearchResult {
    pageInfo: PageInfo!
    customers: [Customer]!
}

# The input for customers query by a filter
input CustomerFilter {
    name: String
    address: String
    city: String
    telephone: String
}

# The input for customers query by order
input CustomerOrder {
    field: CustomerField!
    order: CustomerType
}

# The input for types of query orders
enum CustomerType {
    ASC
    DESC
}

# The input for types of query orders
enum CustomerField {
    id
    name
    address
    city
    telephone
}

type PageInfo {
    pageNumber: Int!
    totalCount: Int!
    totalPages: Int!
    hasNext: Boolean!
    hasPrev: Boolean!
    nextPage: Int
    prevPage: Int
}

type Mutation {
    # Add a new Customer
    addCustomer(input: AddCustomerInput!): AddCustomerPayload!

    # Change an existing owner
    updateCustomer(input: UpdateCustomerInput!): UpdateCustomerPayload!

    # Add a new Company
    addCompany(input: AddCompanyInput!): AddCompanyPayload!
    updateCompany(input: UpdateCompanyInput!): UpdateCompanyPayload!
}

type UpdateCompanyPayload {
    company: Company!
}

type AddCompanyPayload {
    company: Company!
}

input UpdateCompanyInput {
    companyId: ID!
    name: String
    address: String
    city: String
    telephone: String
}

input AddCompanyInput {
    customerId: ID!
    name: String!
    address: String!
    city: String!
    telephone: String!
}

input AddCustomerInput {
    name: String!
    address: String!
    city: String!
    telephone: String!
}

type AddCustomerPayload {
    customer: Customer!
}

input UpdateCustomerInput {
    customerId: Int!
    name: String
    address: String
    city: String
    telephone: String
}

type UpdateCustomerPayload {
    customer: Customer!
}


